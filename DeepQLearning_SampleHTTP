import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam


state_size = 3  # Number of features (parameters) in the HTTP response
action_size = 3  # Number of possible actions
learning_rate = 0.001
gamma = 0.95  


action_descriptions = {
    0: "Retry the request",
    1: "Redirect the request",
    2: "Log the response"
}


def build_model(state_size, action_size):
    model = Sequential()
    model.add(Dense(24, input_dim=state_size, activation='relu'))
    model.add(Dense(24, activation='relu'))
    model.add(Dense(action_size, activation='linear'))
    model.compile(loss='mse', optimizer=Adam(learning_rate=learning_rate))
    return model


model = build_model(state_size, action_size)


def choose_action(state, epsilon):
    if np.random.rand() <= epsilon:
        return np.random.choice(action_size)  # Random action (exploration)
    q_values = model.predict(state)
    return np.argmax(q_values[0])  # Action with the highest Q-value (exploitation)


def train_model(state, action, reward, next_state, done):
    target = reward
    if not done:
        target = (reward + gamma * np.amax(model.predict(next_state)[0]))

    target_f = model.predict(state)
    target_f[0][action] = target

    model.fit(state, target_f, epochs=1, verbose=0)


states = np.array([
    [200, 1.2, 0],  # State 1: HTTP 200 OK, load time 1.2s, no error
    [404, 2.5, 1],  # State 2: HTTP 404 Not Found, load time 2.5s, error present
    [500, 3.0, 1],  # State 3: HTTP 500 Internal Server Error, load time 3.0s, error present
    [301, 1.0, 0]   # State 4: HTTP 301 Moved Permanently, load time 1.0s, no error
])


epsilon = 1.0  # Exploration rate
epsilon_decay = 0.995
epsilon_min = 0.01
episodes = 50

for e in range(episodes):
    state = np.reshape(states[np.random.choice(len(states))], [1, state_size])
    done = False

    while not done:
        action = choose_action(state, epsilon)

        
        next_state = np.reshape(states[np.random.choice(len(states))], [1, state_size])
        reward = np.random.rand()  # Example reward (randomly generated here)
        done = np.random.rand() > 0.95  # Randomly decide if the episode is done

        train_model(state, action, reward, next_state, done)

        state = next_state

        if done:
            print(f"Episode {e+1}/{episodes} finished")
            break

    if epsilon > epsilon_min:
        epsilon *= epsilon_decay


test_state = np.array([[200, 1.0, 0]])  # Example state
predicted_action = choose_action(test_state, epsilon=0.0)  

print(f"Predicted action for state {test_state}: {predicted_action} ({action_descriptions[predicted_action]})")
